g++ -std=c++11 -o RGBCube.macos RGBCube.cpp TriangleMesh.cpp Application.cpp Window.cpp GLSL.cpp -framework OpenGL -lGLEW -lglut  
./RGBCube.macos




g++ -std=c++11 -o RGBCube.macos RGBCube.cpp Window.hpp  -framework OpenGL -lGLEW -lglut  




DONE 1. Callbacks (1 Punkt)
Registrieren Sie in der Funktion startEventloop der Klasse InputManager in der Datei Input.cpp
den display-Callback Ihrer Application-Klasse (RGBCube.cpp) sowie den keyPressed-Callback. Fügen
Sie dazu folgende Codezeilen ein:
glutDisplayFunc(display);
glutKeyboardFunc(keyPressed);
Mit Tippen der Taste q sollte sich nun das Programm beenden.
Hinweis: Den Rest der Klasse können Sie getrost ignorieren.

R-> add this two fuc to the Input.cpp  inside  
     template <class Application> void InputManager<Application>::registerCallbacks(void){




DONE 2. Tiefenpuffer (1 Punkte)
Der Würfel, der sich nun auf dem Bildschirm zeigt, sieht “kaputt” aus. Was könnte die Ursache sein?
Vergleichen Sie mit dem Würfel in der Musterlösung!
Hinweise: Sie können in der mitgelieferten Demo mit der Taste d zwischen der “kaputten” und der
korrekten Darstellung umschalten. Der Würfel dreht sich und stoppt nach Aktivieren der SPACE-Taste.
Folgende Zeilen, an der richtigen Stelle in RGBCube.cpp eingefügt, beheben das Problem:
// enable depth test (z-buffer)
glClearDepth(1);
glDepthFunc(GL_LESS);
glEnable(GL_DEPTH_TEST);
Außerdem müssen Sie noch die Zeile
glClear(GL_COLOR_BUFFER_BIT);
wie folgt ergänzen:
glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
Hinweis: Versuchen Sie einmal, GL_LESS mit GL_GREATER zu ersetzen und glClearDepth 0 zu übergeben.
Was ist der Effekt?
1 of 3
DONE 3. Drehung (1 Punkt)
Nachdem der Würfel nun korrekt angezeigt wird, wollen wir ihn rotiert darstellen. Versuchen Sie eine
Rotation von 45 Grad um die Y-Achse. Diese sollte in etwa so aussehen:
modelMatrix*= glm::rotate(<angle>, <axis>);
wobei Sie den Winkel, repräsentiert durch eine Zahl, und die Achse, repräsentiert durch einen glm::vec3
(Vektor mit 3 Komponenten), durch geeignete Werte ersetzen sollen.
Überlegen Sie sich wieder, in welchen Callback dieser Code gehört.
Hinweis: Die Funktion glm::radians könnte von Nutzen sein.


DONE 4. Tastaturinput: (1 Punkt)
Erstellen Sie in der Datei RGBCube.cpp eine neue Variable angle vom Typ float und inkremetieren/
dekrementieren Sie sie im keyPressed-Callback mit Hilfe der Tasten y (Rotation gegen den
Uhrzeigersinn) bzw. Y (Rotation im Uhrzeigersinn). Es reicht aus, wenn Sie im globalen Scope (also
außerhalb der Funktionsdefinitionen) eine static Variable definieren (beachten Sie, dass dies vor
dem ersten Zugriff auf die Variable geschehen muss):
static float angle= 0;

Das Schlüsselwort static besagt dabei, dass die Variable nur in dieser Datei sichtbar ist. Anders als
bei globalen Variablen, die in sämtlichen Dateien des Projektes gelten, ist dadurch die Gefahr von
Namenskollisionen gering. Der Würfel sollte nun rotierbar sein.
Hinweis: Vergessen Sie nicht, mittels Context::window->redisplay(); ein Neuzeichnen des Fensters
und damit einen erneuten Aufruf des display-Callbacks zu veranlassen! Sonst wird die Animation nicht
sichtbar.
DONE 5. Menüs (1 Punkt)
Ergänzen Sie die vorgegebene reset-Funktion, so dass der Winkel auf 0 zurückgesetzt werden kann. Sie
soll sowohl mittels Tippen von r auf der Tastatur, also auch mittels eines entsprechenden Menüeintrags
aufgerufen werden können. Dazu müssen Sie in RGBCube.hpp ein Menu Item RESET hinzufügen und
dieses im menu-Callback abfragen. Außerdem müssen Sie der Liste der menuEntries in RGBCube.cpp
noch einen Menüeintrag hinzufügen.
Hinweis: Vergessen Sie nicht, mittels Context::window->redisplay(); jeweils wieder ein Neuzeichnen
des Fensters und damit einen erneuten Aufruf des display-Callbacks zu veranlassen! Sonst wird
der Reset nicht sichtbar.

DONE 6. Euler Winkel (1 Punkt)
Bisher kann unser Würfel nur um eine Achse rotieren. Eine naheliegende Idee ist es, drei Winkel statt
des einen zur Rotation um alle drei Achsen zu benutzen (sog. Euler-Winkel). Ändern Sie den Typ
der Variable angle in vec3. Fügen Sie, analog zur bereits implementierten Rotation um die y-Achse,
zwei neue Zeilen zur Rotation um x- und z-Achse hinzu. Der Würfel sollte nun um alle drei Achsen
rotierbar sein.
Hinweis: Denken Sie daran, auch die reset-Funktion geeignet anzupassen!

7. Gimbal Lock (1 Punkt)
Leider ist diese Lösung nicht optimal und hat sogar schon Flugzeugabstürze verursacht. Demonstrieren
Sie anhand ihres Programms den sog. Gimbal Lock (siehe Link auf Moodle), der daran schuld war!
Hinweis: Im cg-Labor gibt es zu Demonstrationszwecken einen Gimbal aus Papier.
2 of 3
8. Matrix Rotation (2 Punkte)
Im nächsten Schritt wollen wir einen verbesserten Algorithmus für die 3D-Rotation implementieren.
Dennoch behalten wir den alten Code zu Demonstrationszwecken. Schließen Sie Ihre Rotationen in
eine if-Abfrage der (vorgegebenen) Boolschen Variable euler ein. Statt auf die Modelmatrix multiplizieren
wir unsere Rotationen nun auf die (vorgegebene) Rotationsmatrix auf:
rotationMatrix*= glm::rotate(<angle>, <axis>);
Anders als die Modelmatrix wird die Rotationsmatrix nicht in jedem Frame auf die Einheitsmatrix
zurückgesetzt, so dass sich die Rotationen (nicht die Winkel) akkumulieren. Dementsprechend können
Sie die Rotation direkt im keyPressed-Callback vornehmen. Achten Sie dabei darauf, den selben Inkrement
wie für die Euler-Winkel zu verwenden, damit die Animation auch gleich schnell läuft.
Schlussendlich muss in jedem Frame die Rotationsmatrix dann noch auf die Modelmatrix aufmultipliziert
werden, um Ihre Wirkung zu entfalten. Dies geschieht in dem Zweig Ihres Programms, in dem
euler FALSE ist.
modelMatrix*= rotationMatrix;

Hinweis: Denken Sie wieder daran, auch die reset-Funktion geeignet anzupassen!
9. Rotation in World Space (1 Punkt)
Leider rotiert der Würfel um die (verdehten) Achsen des lokalen Koordinatensystems. Multiplizieren
Sie die Rotationen von links anstatt wie bisher von rechts auf die Rotationsmatrix auf. Also
rotationMatrix= glm::rotate(<angle>, <axis>) * rotationMatrix;
anstatt
rotationMatrix*= glm::rotate(<angle>, <axis>);
Was ist der Effekt?
3 of 3